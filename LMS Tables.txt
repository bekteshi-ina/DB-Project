create database LMS;
use LMS;

CREATE TABLE User (
    user_id  INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20),
    email VARCHAR(50),
    date_of_birth DATETIME,
    date_of_creation DATETIME NOT NULL,
    last_loggedIn  DATETIME NOT NULL
 );
 CREATE TABLE Student (
   std_id INT PRIMARY KEY,
   FOREIGN KEY (std_id) references User (user_id)
 );
 CREATE TABLE Instructor (
  specialization VARCHAR(30),
  inst_id INT PRIMARY KEY,
  FOREIGN KEY (inst_id) REFERENCES User(user_id)
);
CREATE TABLE Admin(
   admin_id INT PRIMARY KEY,
   FOREIGN KEY (admin_id) references User (user_id)
 );
CREATE TABLE Course (
  course_id INT AUTO_INCREMENT PRIMARY KEY,
  title VARCHAR(100) NOT NULL,
  description VARCHAR(500),
  inst_id INT,
  FOREIGN KEY (inst_id) REFERENCES Instructor(inst_id)
);
CREATE TABLE Certification (
     certification_id INT AUTO_INCREMENT PRIMARY KEY,
     course_id INT, 
     std_id INT,
     discription VARCHAR(500),
     ranking  DECIMAL(5,2) NOT NULL,
     FOREIGN KEY (course_id) REFERENCES Course(course_id),
     FOREIGN KEY (std_id) REFERENCES Student(std_id)
 );
CREATE TABLE Enrollment (
     std_id INT,
     FOREIGN KEY (std_id) REFERENCES student(std_id),
     course_id INT,
     FOREIGN KEY (course_id) REFERENCES course(course_id)
 );
CREATE TABLE Assignment(
    assig_id INT PRIMARY KEY AUTO_INCREMENT,
    deadline DATETIME NOT NULL,
    assig_info BLOB NOT NULL,
    upload_date DATETIME NOT NULL,
    course_id INT,
    FOREIGN KEY (course_id) REFERENCES Course(course_id)
 );
CREATE TABLE Submission(
   sub_id INT PRIMARY KEY AUTO_INCREMENT,
   submission_date DATETIME NOT NULL,
   submission_file BLOB NOT NULL,
   std_id INT NOT NULL,
   assig_id INT NOT NULL,
   FOREIGN KEY (std_id) REFERENCES Student(std_id),
   FOREIGN KEY ( assig_id) REFERENCES Assignment( assig_id)
 );
CREATE TABLE  Schedule(
  schedule_id INT AUTO_INCREMENT PRIMARY KEY,
  start_date date,
  end_date date,
  nr_of_sessions INT,
  session_duration TIME,
  course_id INT,
  FOREIGN KEY(course_id) references Course(course_id)
 );
CREATE TABLE Content (
  content_id INT AUTO_INCREMENT PRIMARY KEY,
  upload_date datetime NOT NULL,
  update_date datetime NOT NULL,
  content_description BLOB NOT NULL,
  course_id INT,
  FOREIGN KEY(course_id) references Course(course_id)
 );
CREATE TABLE Discount (
     discount_id INT AUTO_INCREMENT PRIMARY KEY,
     discount_name VARCHAR(30),
     discount_rate DECIMAL(5,2) NOT NULL DEFAULT 0,
     start_date DATETIME,
     end_date DATETIME
 );
CREATE TABLE Payment ( 
     payment_id INT AUTO_INCREMENT PRIMARY KEY,
     payment_method VARCHAR(15) NOT NULL,
     due_date DATETIME NOT NULL,
     price INT NOT NULL,
     course_id INT,
     discount_id INT,
     FOREIGN KEY (course_id) REFERENCES Course(course_id),
     FOREIGN KEY (discount_id) REFERENCES Discount(discount_id)
 );
 
 SHOW TABLES;



